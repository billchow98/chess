#include "eval.h"

#include "common.h"

namespace tuna::eval {

// Fine-tuned https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function
// clang-format off
const auto MG_PST = std::array<std::array<Score, 64>, 6>{{
    {
            0,   0,   0,   0,   0,   0,   0,   0,
            238, 282, 213, 250, 201, 260, 153,  87,
            131, 129, 150, 166, 203, 190, 149, 101,
            103, 138, 124, 137, 147, 113, 108,  76,
            71, 109, 101, 121, 133, 111, 114,  75,
            83, 111,  95,  86, 110,  99, 151,  92,
            70, 105,  70,  59,  85, 143, 164,  83,
            0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
            199, 295, 375, 356, 487, 291, 398, 284,
            313, 365, 502, 460, 435, 499, 423, 390,
            357, 496, 473, 515, 536, 593, 517, 469,
            413, 428, 446, 492, 467, 510, 449, 434,
            381, 420, 427, 425, 446, 438, 433, 386,
            381, 389, 417, 421, 441, 432, 434, 381,
            369, 337, 395, 407, 389, 409, 376, 380,
            274, 382, 324, 370, 378, 361, 386, 363,
    },
    {
            414, 446, 349, 404, 419, 396, 459, 432,
            412, 472, 424, 436, 492, 534, 477, 385,
            430, 499, 514, 500, 495, 529, 501, 446,
            444, 460, 478, 534, 503, 503, 457, 449,
            446, 471, 472, 494, 497, 458, 454, 447,
            429, 460, 467, 470, 468, 479, 459, 450,
            446, 453, 467, 436, 452, 475, 483, 438,
            385, 433, 421, 413, 414, 419, 387, 416,
    },
    {
            630, 642, 631, 658, 677, 601, 633, 642,
            626, 634, 675, 679, 701, 682, 632, 649,
            590, 618, 631, 651, 624, 664, 685, 618,
            559, 575, 614, 627, 620, 643, 580, 564,
            533, 554, 557, 586, 594, 561, 597, 551,
            516, 537, 552, 549, 580, 577, 576, 530,
            508, 555, 537, 551, 558, 597, 554, 471,
            559, 553, 581, 601, 597, 590, 525, 540,
    },
    {
        1215,1255,1290,1263,1332,1312,1310,1312,
        1223,1203,1251,1259,1229,1335,1290,1328,
        1228,1239,1261,1277,1296,1339,1321,1332,
        1226,1222,1241,1240,1261,1275,1257,1257,
        1242,1220,1243,1247,1249,1243,1259,1245,
        1239,1257,1244,1239,1229,1250,1264,1239,
        1200,1235,1264,1242,1252,1253,1226,1238,
        1250,1222,1227,1263,1219,1200,1202,1186,
    },
    {
            -80,  35,  22, -17, -66, -46,   0,  12,
            42,  -1, -24,   2,  -7,   3, -45, -30,
            -9,  31,   8, -13, -23,   7,  16, -18,
            -23, -19, -12, -29, -37, -21,  -2, -45,
            -59,   1, -37, -46, -50, -44, -44, -76,
            -14, -21, -36, -58, -50, -34, -24, -42,
            -3,  -4, -12, -96, -58, -31,  17,   7,
            -24,  38,  -4, -76,  14, -63,  46,  10,
    },
}};
// clang-format on

// clang-format off
const auto EG_PST = std::array<std::array<Score, 64>, 6>{{
    {
            0,   0,   0,   0,   0,   0,   0,   0,
            337, 326, 338, 307, 315, 297, 335, 346,
            272, 267, 245, 225, 212, 199, 236, 239,
            193, 174, 154, 138, 124, 133, 158, 157,
            168, 158, 121, 122, 128, 120, 144, 137,
            151, 153, 137, 140, 142, 134, 137, 136,
            170, 164, 150, 121, 147, 145, 145, 131,
            0,   0,   0,   0,   0,   0,   0,   0,
    },
    {
            264, 291, 324, 311, 302, 307, 276, 224,
            308, 336, 311, 352, 331, 315, 303, 285,
            317, 324, 369, 369, 354, 348, 327, 296,
            330, 354, 377, 380, 375, 361, 366, 309,
            308, 335, 371, 384, 360, 360, 341, 304,
            297, 330, 332, 352, 349, 331, 301, 291,
            286, 307, 322, 326, 317, 290, 296, 284,
            290, 263, 297, 312, 300, 304, 267, 237,
    },
    {
            350, 338, 351, 353, 356, 355, 341, 331,
            360, 368, 374, 352, 369, 356, 356, 350,
            369, 354, 380, 365, 363, 390, 376, 377,
            369, 391, 388, 383, 394, 387, 373, 374,
            366, 374, 384, 403, 386, 380, 360, 347,
            324, 356, 376, 382, 395, 359, 337, 332,
            337, 315, 357, 357, 357, 348, 337, 312,
            317, 342, 305, 348, 341, 324, 347, 331,
    },
    {
            638, 646, 660, 656, 654, 645, 646, 639,
            654, 659, 664, 654, 641, 641, 650, 641,
            646, 652, 649, 651, 642, 637, 641, 632,
            634, 638, 651, 635, 638, 641, 637, 633,
            623, 639, 635, 638, 617, 617, 620, 606,
            605, 613, 608, 611, 610, 600, 614, 599,
            597, 609, 607, 606, 588, 599, 595, 595,
            594, 608, 614, 620, 618, 601, 614, 576,
    },
    {
        1129,1171,1174,1172,1183,1174,1158,1170,
        1125,1165,1190,1200,1212,1188,1185,1153,
        1115,1156,1159,1216,1204,1204,1174,1169,
        1153,1170,1178,1208,1219,1201,1218,1192,
        1118,1173,1170,1209,1181,1186,1193,1172,
        1122,1105,1166,1139,1137,1159,1151,1132,
        1106,1110,1098,1110,1106,1087,1075,1083,
        1101,1099,1101,1082,1119,1083,1109,1090,
    },
    {
            -90, -37, -15, -17, -11,  14,  -6, -30,
            -2,  16,  17,  28,  25,  49,  31,  20,
            26,  25,  31,  27,  32,  47,  53,  25,
            -7,  29,  33,  34,  34,  53,  46,   8,
            -20,   2,  29,  36,  40,  36,  12, -18,
            -27, -12,   7,  25,  31,  20,   6, -17,
            -32,  -9,   5,  10,  13,   3,   0, -26,
            -56, -33, -27, -30, -53, -35, -35, -70,
    },
}};
// clang-format on

const auto PIECE_PHASE = std::array<i32, 6>{0, 1, 1, 2, 4, 0};

// Piece value is from white's perspective
Score mg_piece_value(Color sd, Piece pc, Square sq) {
    return sd == color::White ? MG_PST[pc][sq ^ 56] : -MG_PST[pc][sq];
}

Score eg_piece_value(Color sd, Piece pc, Square sq) {
    return sd == color::White ? EG_PST[pc][sq ^ 56] : -EG_PST[pc][sq];
}

i32 piece_phase(Piece pc) {
    return PIECE_PHASE[pc];
}

Score evaluate(Board &board) {
    auto mg_phase = std::min(board.game_phase(), 24);
    auto eg_phase = 24 - mg_phase;
    auto mg_material = board.mg_material();
    auto eg_material = board.eg_material();
    auto material = (mg_material * mg_phase + eg_material * eg_phase) / 24;
    return score::side_score(material, board.turn());
}

}  // namespace tuna::eval
